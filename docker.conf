# This is the derby-site docker process upstart script
# Should be copied to /etc/init/derbyjs/cypher.conf

start on filesystem and started docker
stop on runlevel [!2345]

kill timeout 20

respawn
respawn limit 5 5
umask 022

script
  SERVICE=$(basename $UPSTART_JOB)
  CONTAINER="${SERVICE}"
  IMAGE="derbyjs/${CONTAINER}"

  echo "[$(date)] - $SERVICE starting"
  # Sometimes the process exits without removing the docker image. We can't
  # create a new Docker image with the same name, so cleanup any existing images
  # with this container's name first
  if docker ps -a | grep -q $CONTAINER; then
    echo 'Removing docker image'
    docker rm $CONTAINER || true
  fi
  echo "Running $CONTAINER $IMAGE - build $SHA"
  exec docker run \
    --name $CONTAINER \
    -p "8787:8787" \
    -h "${HOSTNAME}-${CONTAINER}" \
    -v "/var/log/upstart:/var/log/upstart" \
    -v "/var/lever/github.js:/var/cypher/config/github.js" \
    --link mongo:mongo \
    --link redis:redis \
    --rm \
    $IMAGE
end script

post-stop script
  SERVICE=$(basename $UPSTART_JOB)
  CONTAINER=$SERVICE
  IMAGE="derbyjs/${CONTAINER}"

  echo "[$(date)] - $SERVICE starting"

  # If the kill timeout expires, the process is killed - but the docker client
  # process that gets killed isn't the actual image process, so we need to make
  # sure the docker image is actually stopped.
  if docker ps | grep -q $CONTAINER; then
    echo 'Killing zombie docker container'
    docker stop -t 2 $CONTAINER || true
    docker wait $CONTAINER || true
  fi
  if docker ps -a | grep -q $CONTAINER; then
    echo 'Removing docker image'
    docker rm $CONTAINER || true
  fi
end script
